<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo基本知识</title>
    <url>/2021/03/30/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="命令简写"><a href="#命令简写" class="headerlink" title="命令简写"></a>命令简写</h1><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p>
<span id="more"></span>
<p>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p>
<p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
<h1 id="多个tag"><a href="#多个tag" class="headerlink" title="多个tag"></a>多个tag</h1><p><code>tags: [&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;]</code></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Ch12 动态内存与智能指针</title>
    <url>/2021/04/01/c++/cpp-ch12-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E4%B8%8E%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p><strong>静态内存</strong>：保存局部static变量、类static变量和在函数体外定义的变量<br><strong>栈内存</strong>：保存定义在函数体内的非static变量<br>分配在静态内存和栈内存中的对象由<font color="red">编译器自动创建或销毁</font>；栈对象仅在程序块运行时存在；static在程序结束时销毁</p>
<p>此外，每个程序还拥有一个内存池（堆内存）用于<font color="red">动态分配</font>的对象；这类对象的生存周期由程序控制，即需要代码显示销毁<br> <span id="more"></span></p>
<h1 id="动态内存与智能指针"><a href="#动态内存与智能指针" class="headerlink" title="动态内存与智能指针"></a>动态内存与智能指针</h1><p> <strong>动态内存</strong>的管理时通过<font color="red">运算符</font><code>new</code>和<code>delete</code>完成的，<code>new</code>在对象在动态内存中分配空间并返回一个指向该对象的指针，<code>delete</code>接受一个指向动态对象的指针并销毁该对象，释放关联的内存<br> 忘记释放内存就会造成<font color="red">内存泄漏</font></p>
<p> <strong>智能指针</strong>用于安全地使用动态内存，可以自动释放所指向的对象；<code>shared_ptr</code>允许多个指针指向同一个对象、<code>unqiue_ptr</code>独占指向的对象、<code>weak_ptr</code>是一种弱引用，指向<code>shared_ptr</code>管理的对象<br> 智能指针在头文件<code>&lt;memory&gt;</code>中</p>
<h2 id="shared-ptr类"><a href="#shared-ptr类" class="headerlink" title="shared_ptr类"></a>shared_ptr类</h2><p>shared_ptr是一个模板类，定义时要在尖括号里给出指向对象的类型</p>
<p><strong>shared_ptr与unqiue_ptr都支持的操作</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;T&gt; sp;   <span class="comment">//默认初始化，包含一个空指针</span></span><br><span class="line">unique_ptr&lt;T&gt; up;</span><br><span class="line">p;  <span class="comment">//用作条件判断，有指向的对象就为true</span></span><br><span class="line">*p;  <span class="comment">//解引用；</span></span><br><span class="line">p-&gt;mem;  </span><br><span class="line">p.<span class="built_in">get</span>();  <span class="comment">//返回p中保存的指针</span></span><br><span class="line"><span class="built_in">swap</span>(p,q);  <span class="comment">//交换包含的指针</span></span><br><span class="line">p.<span class="built_in">swap</span>(q);</span><br></pre></td></tr></table></figure>
<p><strong>shared_ptr独有的操作</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">make_shared&lt;T&gt;(args);  <span class="comment">//返回一个动态分配的、类型为T的对象的智能指针，对象用args初始化</span></span><br><span class="line"><span class="function">shared_ptr&lt;T&gt; <span class="title">p</span><span class="params">(q)</span></span>;  <span class="comment">//拷贝初始化，q中的计数器会递增。q中的指针必须能转换为T*</span></span><br><span class="line">p=q;  <span class="comment">//p与q都必须是shared_ptr,且保存的指针能相互转换。</span></span><br><span class="line">      <span class="comment">//此操作会递减p的计数器并递增q的计数器，如果p的计数器为0，则释放</span></span><br><span class="line">p.<span class="built_in">unqiue</span>();  <span class="comment">//若p.use_count() == 1，则返回true，否则false</span></span><br><span class="line">p.<span class="built_in">use_count</span>(); <span class="comment">//返回与p共享对象的智能指针数量，可能很慢</span></span><br></pre></td></tr></table></figure>
<h3 id="make-shared函数"><a href="#make-shared函数" class="headerlink" title="make_shared函数"></a>make_shared函数</h3><p>这是分配和使用动态内存最安全的方法，注意该函数也要<strong>传入创建对象的类型</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//make_shared&lt;T&gt;(args)</span></span><br><span class="line">shared_ptr&lt;<span class="keyword">int</span>&gt; int_p = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>); <span class="comment">//int_p指向值为42的int</span></span><br><span class="line">shared_ptr&lt;string&gt; str_p = make_shared&lt;string&gt;(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>)  <span class="comment">//str_p指向值为&quot;aaa&quot;的字符串</span></span><br></pre></td></tr></table></figure>
<p>args即指向对象类型的构造函数参数列表，不传递参数则进行<strong>值初始化</strong></p>
<p>可以用auto定义一个对象保存<code>make_shared</code>的返回值</p>
<h3 id="shared-ptr的拷贝和赋值"><a href="#shared-ptr的拷贝和赋值" class="headerlink" title="shared_ptr的拷贝和赋值"></a>shared_ptr的拷贝和赋值</h3><p>进行拷贝和赋值操作时，每个<code>shared_ptr</code>都会记录有多少个其他<code>shared_ptr</code>指向相同的对象<br>每个<code>shared_ptr</code>都有一个引用计数，当1) 用一个<code>shared_ptr</code>初始化另一个 2) 作为参数传递给函数 3) 作为函数的返回值 时，计数都会<strong>递增</strong>。当某个<code>shared_ptr</code>被赋予新值或者被销毁，计数就会<strong>递减</strong></p>
<h3 id="shared-ptr的自动销毁"><a href="#shared-ptr的自动销毁" class="headerlink" title="shared_ptr的自动销毁"></a>shared_ptr的自动销毁</h3><p>当指向对象的最后一个<code>shared_ptr</code>被销毁时（引用计数为0），<code>shared_ptr</code>类就会自动销毁此对象（通过调用<strong>析构函数</strong>）</p>
<p>对于一块内存，只要有一个<code>shared_ptr</code>对象引用它，该内存就不会被释放。如果<code>shared_ptr</code>无用且未销毁，则会浪费内存。</p>
<h3 id="程序为何使用动态内存？"><a href="#程序为何使用动态内存？" class="headerlink" title="程序为何使用动态内存？"></a>程序为何使用动态内存？</h3><p>a) 程序不知道自己要使用多少对象<br>b) 程序不知道自己所需对象的准确类型<br>c) 程序需要在多个对象间共享数据</p>
<h2 id="直接管理内存（new、delete）"><a href="#直接管理内存（new、delete）" class="headerlink" title="直接管理内存（new、delete）"></a>直接管理内存（new、delete）</h2><p>区别于智能指针，<code>new</code>和<code>delete</code>不能依赖对象的拷贝、赋值和销毁的默认定义，容易出错</p>
<h3 id="使用new动态分配和初始化对象"><a href="#使用new动态分配和初始化对象" class="headerlink" title="使用new动态分配和初始化对象"></a>使用new动态分配和初始化对象</h3><p>自由空间分配的内存是无名的，因而new无法为其分配的对象命名，而是返回一个指向该对象的指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认情况下，动态分配的对象是默认初始化的</span></span><br><span class="line">string *ps = <span class="keyword">new</span> string; <span class="comment">//ps指向一个空串</span></span><br><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="keyword">int</span>; <span class="comment">//pi指向一个未初始化的int</span></span><br><span class="line"><span class="comment">//可以用直接初始化或列表初始化</span></span><br><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">100</span>);</span><br><span class="line">string *ps = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="number">5</span>,<span class="string">&#x27;a&#x27;</span>);  <span class="comment">//指向一个值为&quot;aaaaa&quot;的字符串</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; *pv = <span class="keyword">new</span> vector&lt;<span class="keyword">int</span>&gt;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;; </span><br><span class="line"><span class="comment">//也可以用值初始化,即加一对空括号</span></span><br><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>();</span><br><span class="line">string *ps = <span class="keyword">new</span> <span class="built_in">string</span>();</span><br></pre></td></tr></table></figure>
<p>对于有自己的构造函数的类型来说，值初始化没有意义；但对于<strong>内置类型</strong>，值初始化对内置类型有良好定义的值，而默认初始化对象的值则是无定义的</p>
<p>截至P408</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>动态内存</tag>
        <tag>智能指针</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Ch1 入门</title>
    <url>/2021/03/30/c++/cpp_ch1_%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>输入一系列数据时，可使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(std::cin&gt;&gt;value)</span><br></pre></td></tr></table></figure>
<p>当输入文件结束符时，语句</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::cin&gt;&gt;value</span><br></pre></td></tr></table></figure>
<p>的值为0，从而退出循环<br>文件结束符：<em>windows</em>  <code>ctrl+Z</code>    <em>unix</em>  <code>ctrl+D</code></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Ch2 变量与基本内置类型</title>
    <url>/2021/03/30/c++/cpp_ch2_%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h1><h2 id="算术类型"><a href="#算术类型" class="headerlink" title="算术类型"></a>算术类型</h2><p><code>bool, char, wchar_t, char16_t, char32_t, short, int, long,  long long, float, double, long double</code></p>
<span id="more"></span>
<h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><p><strong>①整型字面值</strong><br>十进制 <code>20</code>     八进制  <code>020</code>    十六进制<code>0x20 0X20</code><br>十进制字面值的默认类型是<code>int long longlong</code>中能容纳的，且位数最少的，比如2为<code>int</code>，2^17为<code>long</code><br><strong>②浮点数字面值</strong>：默认为<code>double</code><br><strong>③字符字面值</strong>：默认为<code>char</code>，如<code>&#39;a&#39;</code>；字符串为<code>char</code>的数组，如<code>&quot;ab&quot;</code><br><strong>④布尔字面值</strong>：<code>true</code>和<code>false</code><br><strong>⑤指针字面值</strong>：<code>nullptr</code><br><strong>⑥转义序列：</strong></p>
<table>
<thead>
<tr>
<th>column0</th>
<th>column1</th>
<th>column2</th>
</tr>
</thead>
<tbody><tr>
<td>换行符：<code>\n</code></td>
<td>横向制表符：<code>\t</code></td>
<td>纵向制表符：<code>\v</code></td>
</tr>
<tr>
<td>退格符：<code>\b</code></td>
<td>回车符：<code>\r</code></td>
<td></td>
</tr>
</tbody></table>
<p><strong>用法</strong>：<code>std::cout&lt;&lt;&quot;Hello!&quot;&lt;&lt;&#39;\n&#39;;</code><br><strong>通过添加前缀，后缀可以指定（改变）字面值的类型</strong></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><font color=#FF0000>初始化与赋值不同，初始化是创建变量时给定一个值，赋值是消去原有值并给定新值</font></p>
<h2 id="列表初始化（C-11新特性）"><a href="#列表初始化（C-11新特性）" class="headerlink" title="列表初始化（C++11新特性）"></a>列表初始化（C++11新特性）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下都是正确的</span></span><br><span class="line"><span class="keyword">int</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> units_sold = &#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="keyword">int</span> units_sold&#123;<span class="number">0</span>&#125; ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">units_sold</span><span class="params">(<span class="number">0</span>)</span> </span>;</span><br></pre></td></tr></table></figure>
<p>对内置类型变量用列表初始化时，<strong>如果存在丢失数据的可能，则编译器报错</strong>，比如:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> <span class="number">1</span>d = <span class="number">3.1415926536</span>;</span><br><span class="line"><span class="keyword">int</span> a&#123;ld&#125;, b = &#123;ld&#125;; <span class="comment">// 错误:转换未执行，因为存在丢失信息的危险</span></span><br><span class="line">int c(ld)， d = ld;  //正确:转换执行，且确实丢失了部分值</span><br></pre></td></tr></table></figure>
<h2 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h2><p>①对于<strong>内置基本类型</strong>：函数体外默认为0，函数体内不作初始化（访问或拷贝将出错）<br>②<strong>自定义类</strong>的默认初始化行为自定义（如<code>string</code>默认初始化为空串）<br>例子：<code>double a=b=3.14   //b未定义，若b已定义，则最终a=b</code><br><font color=#FF0000>使用未初始化变量可能造成程序错误，甚至时对时错，因而最好初始化每个变量</font></p>
<h2 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h2><p>当一个程序要使用其他地方（.h）的名字时，要进行声明（比如用某个头文件里的变量名字a）。<br><strong>声明与定义的差异</strong>：<br>（1）变量在所有相关文件中只能定义一次，可以声明无数次（某个程序要用到其他地方的变量则需要声明）；<br>（2）声明规定了变量的类型和名字，而定义还额外申请存储空间，给定一个初始值<br><strong>关键字</strong><code>extern</code>：<br><code>extern int a; //只声明不定义</code><br>若写成<code>extern int a=10</code>，则<code>extern</code>失效<br><font color=#FF0000>函数体内初始化一个extern标记的变量会出错</font></p>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>最好在使用变量的时候定义它<br>作用域中一旦声明了某个名字，它所嵌套着的所有作用域中都能访问该名字。同时，允许在内层作用域中重新定义外层作用域已有的名字:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//该程序仅用于说明:函数内部不宜定义与全局变量同名的新变量</span></span><br><span class="line"><span class="keyword">int</span> reused = <span class="number">42</span>; <span class="comment">// reused 拥有全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> unique = <span class="number">0</span>; <span class="comment">// unique 拥有块作用域</span></span><br><span class="line"><span class="comment">//输出#1:使用全局变量reused;输出42 0</span></span><br><span class="line">    std::cout &lt;&lt; reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">int</span> reused = <span class="number">0</span>; <span class="comment">// 新建局部变量reused,覆盖了全局变量reused</span></span><br><span class="line"><span class="comment">//输出#2:使用局部变量reused;输出0 0</span></span><br><span class="line">    std::cout &lt;&lt; reused &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; unique &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//输出#3:显式地访问全局变量reused;输出42 0</span></span><br><span class="line">    std::cout &lt;&lt; ::reused &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; unique &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 复合类型</span><br><span class="line">## 引用</span><br><span class="line">引用(reference)为对象起了另外-一个名字，引用类型引用(refers to)另外一种类型。</span><br><span class="line">通过将声明符写成&amp;d的形式来定义引用类型，其中d是声明的变量名:</span><br><span class="line">&#96;&#96;&#96;c++</span><br><span class="line">int ival &#x3D; 1024;</span><br><span class="line">int &amp;refVal &#x3D; ival;  &#x2F;&#x2F; refVal指向ival (是ival的另一个名字)</span><br><span class="line">int &amp;refVal2;  &#x2F;&#x2F;报错:引用必须被初始化</span><br></pre></td></tr></table></figure>
<p>• 引用必须初始化；引用无法重新绑定到另外一个对象<br>• 引用不是对象，不能定义引用的引用，不允许拷贝<br>• 引用不能绑定字面值，只能绑定对象<br>• 给引用赋值，就是给对应变量赋值</p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><ol>
<li>区别于引用，指针是个对象，可以重新指向其他对象，不一定要初始化，允许拷贝<br>v指针初始化时，=右边必须是地址（&amp;a），不能是变量，也不能是整型（0除外，此时为空指针）</li>
<li><strong>指针初始化</strong>:<code> int *p=&amp;a</code>    ** 指针赋值**：<code>p=&amp;a   //指针p现在指向a    </code><br><code>*p=b   //指针p指向的对象的值改为b</code></li>
<li>获取对象地址:<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;ival;</span><br><span class="line"><span class="comment">//P存放变量ival的地址，或者说p是指向变量ival的指针</span></span><br></pre></td></tr></table></figure></li>
<li> 访问指针所指对象：<code>*p</code>，<strong>解引用操作只适合确实有指向对象的指针</strong></li>
<li>注意：不能把某类型的值直接赋给对应指针</li>
</ol>
<h2 id="复合类型声明"><a href="#复合类型声明" class="headerlink" title="复合类型声明"></a>复合类型声明</h2><p>基本类型只有一个，声明符形式多样（*，&amp;是类型修饰符，是声明符的一部分）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i是一个int型的数，p是一个int型指针，r是一个int型引用</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1024</span>, *p = &amp;i, &amp;r = i;</span><br></pre></td></tr></table></figure>
<h2 id="指向指针的引用"><a href="#指向指针的引用" class="headerlink" title="指向指针的引用"></a>指向指针的引用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> *&amp;r = p; <span class="comment">//r是一个对指针p的引用</span></span><br></pre></td></tr></table></figure>
<p>注意r的类型，对于复杂类型，从右往左读，离得最近的符号（&amp;）起最重要的作用<br><font color=#FF0000>*和&amp;只从属于某个声明符，不属于某个类型</font></p>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>关键字const把变量定义成一个常量，之后不允许修改，并且必须初始化：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = get_ <span class="built_in">size</span>(); <span class="comment">// 正确:运行时初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> j = <span class="number">42</span>; <span class="comment">//正确:编译时初始化</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> k;  <span class="comment">//错误:k是一个未经初始化的常量</span></span><br></pre></td></tr></table></figure>
<p>const仅在单一文件内有效，如果想要一个常量在所有文件内有效，则使用extern声明：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file_ 1.cc定义并初始化了一个常量，该常量能被其他文件访问</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="built_in">fcn</span>() ;</span><br><span class="line"><span class="comment">// file_ 1.h头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufSize; <span class="comment">// 与file_ 1.cc 中定义的bufSize是同一个</span></span><br></pre></td></tr></table></figure>
<h2 id="对常量的引用"><a href="#对常量的引用" class="headerlink" title="对常量的引用"></a>对常量的引用</h2><p>显然不能修改引用指向的对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">1024</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = ci; <span class="comment">//正确:引用及其对应的对象都是常量</span></span><br><span class="line">r1 = <span class="number">42</span>; <span class="comment">// 错误: r1是对常量的引用</span></span><br><span class="line"><span class="keyword">int</span> &amp;r2 = ci; <span class="comment">//错误:试图让一个非常量引用指向一个常量对象</span></span><br></pre></td></tr></table></figure>
<p>常量只能被常量引用指向，而初始化常量引用不一定要用常量，<strong>允许常量引用绑定非常量、字面值、表达式</strong>，但是不允许用该常量引用修改绑定对象</p>
<h2 id="指向常量的指针和常量指针"><a href="#指向常量的指针和常量指针" class="headerlink" title="指向常量的指针和常量指针"></a>指向常量的指针和常量指针</h2><p>A) 对常量的指针，也不能修改指向的对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>; <span class="comment">// pi是个常量，它的值不能改变</span></span><br><span class="line"><span class="keyword">double</span> *ptr = &amp;pi; <span class="comment">//错误: ptr是一个普通指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi; <span class="comment">//正确: cptr可以指向一个双精度常量</span></span><br></pre></td></tr></table></figure>
<p>B) 常量指针：指针本身是常量，必须初始化，其指（保存的地址）不能改变</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb; <span class="comment">// curErr 将一直指向errNumb</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi; <span class="comment">// pip是一个指向常量对象的常量指针</span></span><br></pre></td></tr></table></figure>
<p>判断类型：从右往左<br>常量指针不意味着不能通过指针修改绑定对象（取决于对象的类型）</p>
<h2 id="顶层const和底层const"><a href="#顶层const和底层const" class="headerlink" title="顶层const和底层const"></a>顶层const和底层const</h2><p>顶层const表示指针本身是个常量，底层const表示指针指向常量<br>一般地，顶层const可以指所有自身是常量的对象，底层const与引用或指针相关</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3 = p2; <span class="comment">// 靠右的const是顶层const，靠左的是底层const</span></span><br></pre></td></tr></table></figure>
<p>两者的区别在于拷贝操作，其中顶层const没有影响；对于底层const，拷入和拷出的对象必须具有相同的底层const资格，或者能相互转换（非常量能变成常量，反之不行）</p>
<h2 id="常量表达式"><a href="#常量表达式" class="headerlink" title="常量表达式"></a>常量表达式</h2><p>常量表达式是值不会改变，且在编译过程中就能获得的值（区别于运行阶段）<br>字面值和用常量表达式初始化的常量都是常量表达式，即判定常量表达式只要考察类型和初始值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_ files = <span class="number">20</span>; <span class="comment">// max_ files是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = max_ files + <span class="number">1</span>; <span class="comment">// limit 是常量表达式</span></span><br><span class="line"><span class="keyword">int</span> staff_ size = <span class="number">27</span>; <span class="comment">// staff_ size不是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = get_ <span class="built_in">size</span>(); <span class="comment">// sz 不是常量表达式</span></span><br></pre></td></tr></table></figure>
<p>【注意，第四个表达式在运行阶段（不是编译阶段）获得值】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">constexpr int mf &#x3D; 20; &#x2F;&#x2F; 20是常量表达式</span><br><span class="line">constexpr int limit &#x3D; mf + 1; &#x2F;&#x2F; mf + 1是常量表达式</span><br><span class="line">constexpr int sz &#x3D; size() ; &#x2F;&#x2F;只有当size是一个constexpr函数时才是一条正确的声明语句</span><br></pre></td></tr></table></figure>
<p>A)可以用<code>constexpr</code>函数（该函数简单到在编译时就能获得结果）来初始化<code>constexpr</code>变量<br>B)<code>constexpr</code>的指针初始值必须为<code>nullptr/0</code>，或是某个固定地址的对象（函数体内变量一般不固定地址，不能定义为<code>constexpr</code>，函数体外则可以）<br>C)<code>constexpr</code>定义的指针表示指针是个常量指针：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = <span class="literal">nullptr</span>; <span class="comment">//p是一个指向整型常量的指针</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> *q = <span class="literal">nullptr</span>; <span class="comment">// q是一个指向整数的常量指针</span></span><br></pre></td></tr></table></figure>
<p>p和q的类型相差甚远，p是一个指向常量的指针，而q是一个常量指针，其中的关键在<br>于<code>constexpr</code>把它所定义的对象置为了顶层<code>const</code> ,从而<code>constexpr</code>指针既可以指向常量，也可以指向非常量</p>
<h1 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h1><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//typedef</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> wages;</span><br><span class="line"><span class="keyword">typedef</span> wages base, *p;</span><br><span class="line"><span class="comment">//using</span></span><br><span class="line"><span class="keyword">using</span> SI = Sales_item;</span><br></pre></td></tr></table></figure>
<p><strong>复合类型的别名可能造成错误</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* pstring;</span><br><span class="line"><span class="keyword">const</span> pstring cstr = <span class="number">0</span>; <span class="comment">//cstr是指向char的常量指针</span></span><br><span class="line"><span class="keyword">const</span> pstring *ps; <span class="comment">//ps指向一个指向char的常量指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="number">0</span>; <span class="comment">//对const pstring cstr的错误理解</span></span><br></pre></td></tr></table></figure>
<h2 id="关键字auto"><a href="#关键字auto" class="headerlink" title="关键字auto"></a>关键字auto</h2><p>让编译器自动推断类型，变量必须被初始化<br>auto能在一个语句里定义多个变量，但是每个变量类型必须相同<br>对于复合类型：<br>1）引用：推断的类型取决于引用的对象<br><code>int i=0,&amp;r=I;  auto b=r;  //b是int</code><br>2）auto会忽略顶层const，保留底层const；若要明确指出顶层const，则需要在auto前加const</p>
<h2 id="关键字decltype"><a href="#关键字decltype" class="headerlink" title="关键字decltype"></a>关键字decltype</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(<span class="built_in">f</span>()) sum = x; <span class="comment">// sum的 类型就是函数f的返回类型</span></span><br></pre></td></tr></table></figure>
<p>decltype处理顶层const和引用的方式与auto有些许不同。如果decltype使用的表达式是一个变量,则<code>decltype</code>返回该变量的类型(包括顶层const和引用在内):</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci=<span class="number">0</span>，&amp;Cj = ci;</span><br><span class="line"><span class="keyword">decltype</span>(ci) x = <span class="number">0</span>; <span class="comment">// x的类型是const int</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) y = x; <span class="comment">// y的类型是const int&amp;, y绑定到变量x</span></span><br><span class="line"><span class="keyword">decltype</span>(cj) z; <span class="comment">//错误:z是一个引用，必须初始化</span></span><br></pre></td></tr></table></figure>
<p>因为cj是一个引用，<code>decltype (cj)</code>的结果就是引用类型，因此作为引用的z必须被初始化。<br>需要指出的是，引用从来都作为其所指对象的同义词出现，只有用在<code>decltype</code>处是一个例外。</p>
<p><strong>decltype和引用</strong>:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// decltype 的结果可以是引用类型</span></span><br><span class="line">inti=<span class="number">42</span>，*p=&amp;i，&amp;r=i;</span><br><span class="line"><span class="keyword">decltype</span>(r + <span class="number">0</span>) b; <span class="comment">// 正确:加法的结果是int，因此b是一个(未初始化的) int</span></span><br><span class="line"><span class="keyword">decltype</span>(*p) C; <span class="comment">//错误:c是int&amp;，必须初始化</span></span><br></pre></td></tr></table></figure>
<p>r+0的结果是个int；解引操作*p得到的是引用类型<br>此外，如果给变量套一个括号，编译器会认为这是个变量；套多层括号则会认为是表达式，从而返回引用类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// decltype的表达式如果是加上了括号的变量，结果将是引用</span></span><br><span class="line"><span class="keyword">decltype</span>((i)) d; <span class="comment">// 错误: d是int&amp;，必须初始化</span></span><br><span class="line"><span class="keyword">decltype</span>(i) e; <span class="comment">//正确: e是一个(未初始化的) int</span></span><br></pre></td></tr></table></figure>
<p>赋值会产生引用类型，如果i是int，则表达式<code>i=a</code>的类型是<code>int&amp;</code></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>变量</tag>
        <tag>基本内置类型</tag>
      </tags>
  </entry>
  <entry>
    <title>html 简介</title>
    <url>/2021/04/01/html/html-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>HTML 是用来描述网页的一种语言。<br>HTML 不是一种编程语言，而是一种标记语言<br>HTML 使用标记标签来描述网页<br>HTML文档也叫做 web 页面</p>
<span id="more"></span>
<h1 id="一个实际例子"><a href="#一个实际例子" class="headerlink" title="一个实际例子"></a>一个实际例子</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="例子解析"><a href="#例子解析" class="headerlink" title="例子解析"></a>例子解析</h2><p><code>&lt;!DOCTYPE html&gt;</code> 声明为 HTML5 文档<br><code>&lt;html&gt;</code> 元素是 HTML 页面的根元素<br><code>&lt;head&gt;</code> 元素包含了文档的元（meta）数据，如 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 定义网页编码格式为 utf-8。<br><code>&lt;title&gt;</code> 元素描述了文档的标题<br><code>&lt;body&gt;</code> 元素包含了可见的页面内容<br><code>&lt;h1&gt;</code> 元素定义一个大标题<br><code>&lt;p&gt;</code> 元素定义一个段落</p>
<h1 id="lt-DOCTYPE-gt-声明"><a href="#lt-DOCTYPE-gt-声明" class="headerlink" title="&lt;!DOCTYPE&gt; 声明"></a>&lt;!DOCTYPE&gt; 声明</h1><p><code>&lt;!DOCTYPE&gt;</code>声明有助于浏览器中正确显示网页。<br>网络上有很多不同的文件，如果能够正确声明HTML的版本，浏览器就能正确显示网页内容。<br>doctype声明是不区分大小写的，以下方式均可<br><strong>html5</strong>的通用声明：<code>&lt;!DOCTYPE html&gt;</code></p>
<h1 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h1><p>目前在大部分浏览器中，直接输出中文会出现中文乱码的情况，这时候我们就需要在头部将字符声明为 <strong>UTF-8</strong> 或 <strong>GBK</strong>。<br>在<code>&lt;head&gt;</code>下一行声明<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基础1</title>
    <url>/2021/04/01/html/html-%E5%9F%BA%E7%A1%801/</url>
    <content><![CDATA[<h1 id="html标题"><a href="#html标题" class="headerlink" title="html标题"></a>html标题</h1><p>HTML 标题（Heading）是通过<code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 标签来定义的<br><strong>例子</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="html段落"><a href="#html段落" class="headerlink" title="html段落"></a>html段落</h1><p>HTML 段落是通过标签 <code>&lt;p&gt;</code> 来定义的</p>
<p>在一个段落标签里换行：<code>&lt;p&gt;这个&lt;br&gt;段落&lt;br&gt;演示了分行的效果&lt;/p&gt;</code></p>
<p>当显示页面时，浏览器会移除源代码中多余的空格和空行。<strong>所有连续的空格或空行都会被算作一个空格</strong>。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p>
<h1 id="html链接"><a href="#html链接" class="headerlink" title="html链接"></a>html链接</h1><p>HTML 链接是通过标签 <code>&lt;a&gt;</code> 来定义的<br><strong>例子</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com&quot;</span>&gt;</span>这是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 href 属性中指定链接的地址</p>
<h1 id="html图像"><a href="#html图像" class="headerlink" title="html图像"></a>html图像</h1><p>HTML 图像是通过标签 <code>&lt;img&gt;</code> 来定义的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/images/logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;258&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>图像的名称和尺寸是以属性的形式提供的</p>
<h1 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h1><p>起始标签、标签内容和闭合标签构成一个<strong>html元素</strong>，html文档由html元素定义</p>
<p>html允许<strong>元素嵌套</strong></p>
<p><code>&lt;body&gt;</code> 元素定义了 HTML 文档的主体</p>
<p>HTML 标签对大小写不敏感</p>
<h1 id="html属性"><a href="#html属性" class="headerlink" title="html属性"></a>html属性</h1><p>属性可以在元素中添加附加信息<br>属性一般描述于开始标签<br>属性总是以名称/值对的形式出现，比如：name=”value”</p>
<p>属性值应该始终被包括在引号内。<br>双引号是最常用的，不过使用单引号也没有问题。<br>在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：name=’John “ShotGun” Nelson’</p>
<h1 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h1><p>格式：<code>&lt;!-- 这是一个注释 --&gt;</code></p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基础2</title>
    <url>/2021/04/02/html/html-%E5%9F%BA%E7%A1%802/</url>
    <content><![CDATA[<h1 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h1><h2 id="html-文本格式化标签"><a href="#html-文本格式化标签" class="headerlink" title="html 文本格式化标签"></a>html 文本格式化标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>b</td>
<td>定义粗体文本</td>
</tr>
<tr>
<td>em</td>
<td>定义着重文字</td>
</tr>
<tr>
<td>i</td>
<td>定义斜体字</td>
</tr>
<tr>
<td>small</td>
<td>定义小号字</td>
</tr>
<tr>
<td>strong</td>
<td>定义加重语气</td>
</tr>
<tr>
<td>sub</td>
<td>定义下标字</td>
</tr>
<tr>
<td>sup</td>
<td>定义上标字</td>
</tr>
<tr>
<td>ins</td>
<td>定义插入字</td>
</tr>
<tr>
<td>del</td>
<td>定义删除字</td>
</tr>
</tbody></table>
<span id="more"></span>
<p>通常标签 <code>&lt;strong&gt;</code> 替换加粗标签 <code>&lt;b&gt;</code> 来使用, <code>&lt;em&gt;</code> 替换 <code>&lt;i&gt;</code>标签使用。</p>
<h2 id="html-“计算机输出”-标签"><a href="#html-“计算机输出”-标签" class="headerlink" title="html “计算机输出” 标签"></a>html “计算机输出” 标签</h2><table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td>定义计算机代码</td>
</tr>
<tr>
<td>kbd</td>
<td>定义键盘码</td>
</tr>
<tr>
<td>samp</td>
<td>定义计算机代码样本</td>
</tr>
<tr>
<td>var</td>
<td>定义变量</td>
</tr>
<tr>
<td>pre</td>
<td>定义预格式文本</td>
</tr>
</tbody></table>
<h1 id="html链接"><a href="#html链接" class="headerlink" title="html链接"></a>html链接</h1><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，可以点击这些内容来跳转到新的文档或者当前文档中的某个部分。</p>
<p>在标签<code>&lt;a&gt;</code> 中使用了href属性来描述链接的地址</p>
<h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><p>//格式<br><code>&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt;</code><br>//例子<br><code>&lt;a href=&quot;https://www.runoob.com/&quot;&gt;访问菜鸟教程&lt;/a&gt;</code></p>
<h2 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h2><p>使用 target 属性定义被链接的文档在何处显示</p>
<p>例子：<br><code>&lt;a href=&quot;https://www.runoob.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;访问菜鸟教程!&lt;/a&gt;</code></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>_blank</td>
<td>在新窗口中打开被链接文档</td>
</tr>
<tr>
<td>_self</td>
<td>默认。在相同的框架中打开被链接文档</td>
</tr>
<tr>
<td>_parent</td>
<td>在父框架集中打开被链接文档</td>
</tr>
<tr>
<td>_top</td>
<td>在整个窗口中打开被链接文档</td>
</tr>
</tbody></table>
<h2 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h2><p>id属性可用于创建在一个HTML文档书签标记</p>
<p>书签是不以任何特殊的方式显示，在HTML文档中是不显示的，所以对于读者来说是隐藏的</p>
<p>用法：<br>在HTML文档中插入ID:<br><code>&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt;</code></p>
<p>在HTML文档中创建一个链接到  有用的提示部分(id=”tips”）：<br><code>&lt;a href=&quot;#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</code></p>
<p>或者，从另一个页面创建一个链接到  有用的提示部分(id=”tips”）：<br><code>&lt;a href=&quot;https://www.runoob.com/html/html-links.html#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</code></p>
<h1 id="html引用"><a href="#html引用" class="headerlink" title="html引用"></a>html引用</h1><p><strong>短引用</strong>：<code>&lt;q&gt;aaaaaaa&lt;/q&gt;</code><br><strong>长引用</strong>：<code>&lt;blockquote&gt;aaaaaaaaaaaaaaaaaa&lt;/blockquote&gt;</code></p>
<p><strong>缩略词</strong>：对缩写进行标记能够为浏览器、翻译系统以及搜索引擎提供有用的信息<br><code>&lt;abbr title=&quot;World Health Organization&quot;&gt;WHO&lt;/abbr&gt;</code></p>
<p><strong>地址</strong>：用于联系信息的 HTML <code>&lt;address&gt;</code>，通常以斜体显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">Written by Donald Duck.<span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">Visit us at:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Example.com<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Box 564, Disneyland<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">USA</span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>著作标题</strong>：HTML <code>&lt;cite&gt;</code> 元素定义著作的标题。浏览器通常会以斜体显示 <code>&lt;cite&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">cite</span>&gt;</span>The Scream<span class="tag">&lt;/<span class="name">cite</span>&gt;</span> by Edward Munch. Painted in 1893.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>双向重写</strong>：<code>&lt;bdo&gt;</code> 元素用于覆盖当前文本方向</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>This text will be written from right to left<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="html颜色"><a href="#html颜色" class="headerlink" title="html颜色"></a>html颜色</h1><p>只有少数颜色能直接用颜色名：aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellow</p>
<p>其他的颜色必须用#开始的16进制串</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基础3</title>
    <url>/2021/04/02/html/html-%E5%9F%BA%E7%A1%803/</url>
    <content><![CDATA[<h1 id="html-CSS"><a href="#html-CSS" class="headerlink" title="html CSS"></a>html CSS</h1><p>通过使用 HTML4.0，所有的格式化代码均可移出 HTML 文档，然后移入一个独立的样式表。</p>
<span id="more"></span>
<h2 id="如何使用样式"><a href="#如何使用样式" class="headerlink" title="如何使用样式"></a>如何使用样式</h2><p>当浏览器读到一个样式表，它就会按照这个样式表来对文档进行格式化。<br>有以下三种方式来插入样式表：</p>
<h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><p>使用外部样式表，可以通过更改一个文件来改变整个站点的外观。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>当单个文件需要特别样式时，就可以使用内部样式表。<br>可以在 head 部分通过 <code>&lt;style&gt;</code> 标签定义内部样式表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>当特殊的样式需要应用到个别元素时，就可以使用内联样式<br>使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; margin-left: 20px&quot;</span>&gt;</span></span><br><span class="line">This is a paragraph</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="html表格"><a href="#html表格" class="headerlink" title="html表格"></a>html表格</h1><p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示：</p>
<table border="1">
<tr>
<td>row 1, cell 1</td>
<td>row 1, cell 2</td>
</tr>
<tr>
<td>row 2, cell 1</td>
<td>row 2, cell 2</td>
</tr>
</table>

<h2 id="表格的边框属性"><a href="#表格的边框属性" class="headerlink" title="表格的边框属性"></a>表格的边框属性</h2><p>如果不定义边框属性，表格将不显示边框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格的表头"><a href="#表格的表头" class="headerlink" title="表格的表头"></a>表格的表头</h2><p>表格的表头使用 th标签进行定义。<br>大多数浏览器会把表头显示为粗体居中的文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Another Heading<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="空单元格"><a href="#空单元格" class="headerlink" title="空单元格"></a>空单元格</h2><p>如果某个单元格是空的（没有内容），浏览器可能无法显示出这个单元格的边框<br>为了避免这种情况，在空单元格中添加一个<strong>空格占位符</strong>，就可以将边框显示出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="comment">&lt;!--空格占位符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="html列表"><a href="#html列表" class="headerlink" title="html列表"></a>html列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>此列项目使用粗体圆点（典型的小黑圆圈）进行标记<br>无序列表始于 <code>&lt;ul&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>列表项目使用数字进行标记<br>有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<dl>
<dt>Coffee</dt>
<dd>Black hot drink</dd>
<dt>Milk</dt>
<dd>White cold drink</dd>
</dl>

<h1 id="html-块"><a href="#html-块" class="headerlink" title="html 块"></a>html 块</h1><h2 id="html块元素"><a href="#html块元素" class="headerlink" title="html块元素"></a>html块元素</h2><p>块级元素在浏览器显示时，<strong>通常会以新行来开始（和结束）</strong>，例如<code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code></p>
<h3 id="html-div"><a href="#html-div" class="headerlink" title="html div"></a>html div</h3><p><code>&lt;div&gt;</code> 可定义文档中的分区或节（division/section）。</p>
<p><code>&lt;div&gt;</code> 标签可以把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。</p>
<p>如果用 id 或 class 来标记 <code>&lt;div&gt;</code>，那么该标签的作用会变得更加有效。</p>
<h2 id="html-内联元素"><a href="#html-内联元素" class="headerlink" title="html 内联元素"></a>html 内联元素</h2><p>内联元素在显示时通常不会以新行开始，例如<code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code></p>
<h3 id="html-span"><a href="#html-span" class="headerlink" title="html span"></a>html span</h3><p>HTML <code>&lt;span&gt;</code> 元素是内联元素，可用作文本的容器。</p>
<p><code>&lt;span&gt;</code> 元素也没有特定的含义。</p>
<p>当与 CSS 一同使用时，<code>&lt;span&gt;</code> 元素可用于为部分文本设置样式属性。</p>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 类</title>
    <url>/2021/04/02/html/html-%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="html-类"><a href="#html-类" class="headerlink" title="html 类"></a>html 类</h1><p>对 HTML 进行分类（设置类），使我们能够为元素的类定义 CSS 样式。<br>为相同的类设置相同的样式，或者为不同的类设置不同的样式。</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">.cities &#123;  <span class="comment">&lt;!--类定义--&gt;</span></span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>:<span class="number">20px</span>;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">London is the capital city of England. </span><br><span class="line">It is the most populous city in the United Kingdom, </span><br><span class="line">with a metropolitan area of over 13 million inhabitants.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="分类块级元素"><a href="#分类块级元素" class="headerlink" title="分类块级元素"></a>分类块级元素</h2><p>HTML <code>&lt;div&gt;</code> 元素是块级元素。它能够用作其他 HTML 元素的容器。</p>
<p>设置 <code>&lt;div&gt;</code> 元素的类，使我们能够为相同的 <code>&lt;div&gt;</code> 元素设置相同的类</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.cities &#123;</span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="css">    <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>:<span class="number">20px</span>;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>London is the capital city of England. </span><br><span class="line">It is the most populous city in the United Kingdom, </span><br><span class="line">with a metropolitan area of over 13 million inhabitants.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paris is the capital and most populous city of France.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tokyo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</span><br><span class="line">and the most populous metropolitan area in the world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="分类行内元素"><a href="#分类行内元素" class="headerlink" title="分类行内元素"></a>分类行内元素</h2><p>HTML <code>&lt;span&gt;</code> 元素是行内元素，能够用作文本的容器。</p>
<p>设置 <code>&lt;span&gt;</code> 元素的类，能够为相同的 <code>&lt;span&gt;</code> 元素设置相同的样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">span</span><span class="selector-class">.red</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Important<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html类</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基础4</title>
    <url>/2021/04/02/html/html-%E5%9F%BA%E7%A1%804/</url>
    <content><![CDATA[<h1 id="html-id属性"><a href="#html-id属性" class="headerlink" title="html id属性"></a>html id属性</h1><p>HTML id 属性用于 为HTML 元素指定唯一的 id。<br>一个 HTML文档中不能存在多个有相同 id 的元素。</p>
<span id="more"></span>
<h2 id="使用id属性"><a href="#使用id属性" class="headerlink" title="使用id属性"></a>使用id属性</h2><p>id 属性用于指向样式表中的特定样式声明。JavaScript 也可使用它来访问和操作拥有特定 ID 的元素。</p>
<p>id 的<strong>语法</strong>是：写一个井号 (#)，后跟一个 id 名称。然后，在花括号 {} 中定义 CSS 属性。</p>
<p>下面的例子中有一个 <code>&lt;h1&gt;</code> 元素，它指向 id 名称 “myHeader”。这个 <code>&lt;h1&gt;</code> 元素将根据 head 部分中的 #myHeader 样式定义进行样式设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#myHeader &#123;</span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;myHeader&quot;</span>&gt;</span>My Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="与class的差异"><a href="#与class的差异" class="headerlink" title="与class的差异"></a>与class的差异</h2><p>同一个类名可以由多个 HTML 元素使用，而一个 id 名称只能由页面中的一个 HTML 元素使用</p>
<h2 id="通过-ID-和链接实现-HTML-书签"><a href="#通过-ID-和链接实现-HTML-书签" class="headerlink" title="通过 ID 和链接实现 HTML 书签"></a>通过 ID 和链接实现 HTML 书签</h2><p>HTML 书签用于<strong>让读者跳转至网页的特定部分</strong>。</p>
<p>要使用书签，您必须首先创建它，然后为它添加链接。</p>
<p>然后，当单击链接时，页面将滚动到带有书签的位置。</p>
<p>实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//创建书签</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;C4&quot;</span>&gt;</span>第四章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//然后，在同一张页面中，向这个书签添加一个链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#C4&quot;</span>&gt;</span>跳转到第四章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">//或者，在另一张页面中，添加指向这个书签的链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;html_demo.html#C4&quot;</span>&gt;</span>Jump to Chapter 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在-JavaScript-中使用-id-属性"><a href="#在-JavaScript-中使用-id-属性" class="headerlink" title="在 JavaScript 中使用 id 属性"></a>在 JavaScript 中使用 id 属性</h2><p>JavaScript 也可以使用 id 属性为特定元素执行某些任务。</p>
<p>JavaScript 可以使用 getElementById() 方法访问拥有特定 id 的元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">displayResult</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;myHeader&quot;</span>).innerHTML = <span class="string">&quot;Have a nice day!&quot;</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="html-内联框架"><a href="#html-内联框架" class="headerlink" title="html 内联框架"></a>html 内联框架</h1><p>iframe 用于<strong>在网页内显示网页</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;URL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> <span class="comment">&lt;!--URL 指向隔离页面的位置--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Iframe-设置高度和宽度"><a href="#Iframe-设置高度和宽度" class="headerlink" title="Iframe 设置高度和宽度"></a>Iframe 设置高度和宽度</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>属性值的默认单位是像素，但也可以用<strong>百分比</strong>来设定（比如 “80%”）</p>
<h2 id="Iframe-删除边框"><a href="#Iframe-删除边框" class="headerlink" title="Iframe 删除边框"></a>Iframe 删除边框</h2><p>frameborder 属性规定是否显示 iframe 周围的边框,设置属性值为 “0” 就可以移除边框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-iframe-作为链接的目标"><a href="#使用-iframe-作为链接的目标" class="headerlink" title="使用 iframe 作为链接的目标"></a>使用 iframe 作为链接的目标</h2><p>iframe 可用作链接的目标（target）。</p>
<p>链接的 target 属性必须引用 iframe 的 name 属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;demo_iframe.htm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span>W3School.com.cn<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="html-javascript"><a href="#html-javascript" class="headerlink" title="html javascript"></a>html javascript</h1><p>HTML <code>&lt;script&gt;</code> 标签用于定义客户端脚本（JavaScript）。</p>
<p><code>&lt;script&gt;</code> 元素即可包含脚本语句，也可通过 src 属性指向外部脚本文件。</p>
<p>JavaScript 的常见用途是图像处理、表单验证和内容的动态更改。</p>
<p>HTML <code>&lt;noscript&gt;</code> 标签定义了替代内容，这些内容将显示给在浏览器中禁用了脚本或浏览器不支持脚本的用户</p>
<h1 id="html-文件路径"><a href="#html-文件路径" class="headerlink" title="html 文件路径"></a>html 文件路径</h1><table>
<thead>
<tr>
<th>路径</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;img src=&quot;picture.jpg&quot;&gt;</code></td>
<td>picture.jpg 位于与当前网页相同的文件夹</td>
</tr>
<tr>
<td><code>&lt;img src=&quot;images/picture.jpg&quot;&gt;</code></td>
<td>picture.jpg 位于当前文件夹的 images 文件夹中</td>
</tr>
<tr>
<td><code>&lt;img src=&quot;/images/picture.jpg&quot;&gt;</code></td>
<td>picture.jpg 当前站点根目录的 images 文件夹中</td>
</tr>
<tr>
<td><code>&lt;img src=&quot;../picture.jpg&quot;&gt;</code></td>
<td>picture.jpg 位于当前文件夹的上一级文件夹中</td>
</tr>
</tbody></table>
<h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p>文件路径描述了网站文件夹结构中某个文件的位置。</p>
<p>文件路径会在链接外部文件时被用到：网页、图像、样式表、JavaScript</p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>给出完整的文件路径，比如src=”<a href="https://www.w3school.com.cn/images/picture.jpg&quot;">https://www.w3school.com.cn/images/picture.jpg&quot;</a></p>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>见表格</p>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基础5</title>
    <url>/2021/04/03/html/html-%E5%9F%BA%E7%A1%805/</url>
    <content><![CDATA[<h1 id="HTML-头部元素"><a href="#HTML-头部元素" class="headerlink" title="HTML 头部元素"></a>HTML 头部元素</h1><h2 id="HTML-lt-head-gt-元素"><a href="#HTML-lt-head-gt-元素" class="headerlink" title="HTML &lt;head&gt; 元素"></a>HTML <code>&lt;head&gt;</code> 元素</h2><p>head 元素是所有头部元素的容器。</p>
<p>以下标签都可以添加到 head 部分：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;script&gt;</code> 以及 <code>&lt;style&gt;</code></p>
<span id="more"></span>
<h2 id="HTML-title-元素"><a href="#HTML-title-元素" class="headerlink" title="HTML title  元素"></a>HTML title  元素</h2><p>title 标签定义文档的标题。<br>title 元素能够：定义浏览器工具栏中的标题;提供页面被添加到收藏夹时显示的标题;显示在搜索引擎结果中的页面标题</p>
<h2 id="HTML-base-元素"><a href="#HTML-base-元素" class="headerlink" title="HTML base 元素"></a>HTML base 元素</h2><p>base 标签为页面上的所有链接规定默认地址或默认目标（target）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.w3school.com.cn/images/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML-link-元素"><a href="#HTML-link-元素" class="headerlink" title="HTML link 元素"></a>HTML link 元素</h2><p>link 标签定义文档与外部资源之间的关系。</p>
<p>link 标签最常用于连接样式表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML-style-元素"><a href="#HTML-style-元素" class="headerlink" title="HTML style 元素"></a>HTML style 元素</h2><p>style 标签用于为 HTML 文档定义样式信息。</p>
<p>您可以在 style 元素内规定 HTML 元素在浏览器中呈现的样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:yellow&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML-meta-元素"><a href="#HTML-meta-元素" class="headerlink" title="HTML meta 元素"></a>HTML meta 元素</h2><p>meta 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。</p>
<p>典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据</p>
<p>一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下面的 meta 元素定义页面的描述--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Free Web tutorials on HTML, CSS, XML&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面的 meta 元素定义页面的关键词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML, CSS, XML&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML-script-元素"><a href="#HTML-script-元素" class="headerlink" title="HTML script 元素"></a>HTML script 元素</h2><p>script 标签用于定义客户端脚本，比如 JavaScript</p>
<h1 id="HTML-布局"><a href="#HTML-布局" class="headerlink" title="HTML 布局"></a>HTML 布局</h1><h2 id="使用-div-元素的-HTML-布局"><a href="#使用-div-元素的-HTML-布局" class="headerlink" title="使用 div 元素的 HTML 布局"></a>使用 div 元素的 HTML 布局</h2><p>div 元素常用作布局工具，因为能够轻松地通过 CSS 对其进行定位</p>
<h2 id="使用-HTML5-的网站布局"><a href="#使用-HTML5-的网站布局" class="headerlink" title="使用 HTML5 的网站布局"></a>使用 HTML5 的网站布局</h2><p>HTML5 提供的新语义元素定义了网页的不同部分：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>header</td>
<td>定义文档或节的页眉</td>
</tr>
<tr>
<td>nav</td>
<td>定义导航链接的容器</td>
</tr>
<tr>
<td>section</td>
<td>定义文档中的节</td>
</tr>
<tr>
<td>article</td>
<td>定义独立的自包含文章</td>
</tr>
<tr>
<td>aside</td>
<td>定义内容之外的内容（比如侧栏）</td>
</tr>
<tr>
<td>footer</td>
<td>定义文档或节的页脚</td>
</tr>
<tr>
<td>details</td>
<td>定义额外的细节</td>
</tr>
<tr>
<td>summary</td>
<td>定义 details 元素的标题</td>
</tr>
</tbody></table>
<h2 id="使用表格的-HTML-布局"><a href="#使用表格的-HTML-布局" class="headerlink" title="使用表格的 HTML 布局"></a>使用表格的 HTML 布局</h2><p>table 元素不是作为布局工具而设计的。</p>
<p>table 元素的作用是显示表格化的数据。</p>
<p>使用 table 元素能够取得布局效果，因为能够通过 CSS 设置表格元素的样式</p>
<h1 id="HTML-响应式设计"><a href="#HTML-响应式设计" class="headerlink" title="HTML 响应式设计"></a>HTML 响应式设计</h1><p>响应式设计RWD能够以可变尺寸传递网页，对于平板和移动设备是必需的</p>
<h2 id="使用-Bootstrap"><a href="#使用-Bootstrap" class="headerlink" title="使用 Bootstrap"></a>使用 Bootstrap</h2><p>使用现成的 CSS 框架。</p>
<p>Bootstrap 是最流行的开发响应式 web 的 HTML, CSS, 和 JS 框架。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>W3School Demo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Resize this responsive page!<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>London is the capital city of England.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>It is the most populous city in the United Kingdom,</span><br><span class="line">    with a metropolitan area of over 13 million inhabitants.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paris is the capital and most populous city of France.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tokyo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</span><br><span class="line">    and the most populous metropolitan area in the world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基础6</title>
    <url>/2021/04/03/html/html-%E5%9F%BA%E7%A1%806/</url>
    <content><![CDATA[<h1 id="HTML-计算机代码元素"><a href="#HTML-计算机代码元素" class="headerlink" title="HTML 计算机代码元素"></a>HTML 计算机代码元素</h1><p>HTML code 元素定义编程代码示例,不保留多余的空格和折行,如需解决该问题，必须在 pre 元素中包围代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Coding Example:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">var person = &#123;</span><br><span class="line">    firstName:&quot;Bill&quot;,</span><br><span class="line">    lastName:&quot;Gates&quot;,</span><br><span class="line">    age:50,</span><br><span class="line">    eyeColor:&quot;blue&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>HTML var 元素定义数学变量：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Einstein wrote:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">var</span>&gt;</span>E = m c<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">var</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Einstein wrote:</p>

<p><var>E = m c<sup>2</sup></var></p>

<h1 id="HTML5-语义元素"><a href="#HTML5-语义元素" class="headerlink" title="HTML5 语义元素"></a>HTML5 语义元素</h1><p>语义元素清楚地向浏览器和开发者描述其意义。</p>
<p>非语义元素的例子：div 和 span - 无法提供关于其内容的信息。</p>
<p>语义元素的例子：form、table 以及 img - 清晰地定义其内容。</p>
<p>HTML5 提供了定义页面不同部分的新语义元素：</p>
<p>article，aside，details，figcaption，figure，footer，header，main，mark，nav，section，summary，time</p>
<h1 id="HTML5-代码约定"><a href="#HTML5-代码约定" class="headerlink" title="HTML5 代码约定"></a>HTML5 代码约定</h1><ol>
<li>请使用正确的文档类型 <code>&lt;!DOCTYPE html&gt;</code></li>
<li>请使用小写元素名</li>
<li>关闭所有 HTML 元素</li>
<li>关闭空的 HTML 元素 <code>&lt;meta charset=&quot;utf-8&quot; /&gt; </code></li>
<li>使用小写属性名 <code>&lt;div class=&quot;menu&quot;&gt;</code></li>
<li>属性值加引号 <code>&lt;table class=&quot;table striped&quot;&gt;</code></li>
<li>请始终对图像使用 alt 属性,当图像无法显示时该属性很重要</li>
<li>请始终定义图像尺寸。这样做会减少闪烁，因为浏览器会在图像加载之前为图像预留空间。</li>
<li>精简空格 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code></li>
<li>避免长代码行</li>
<li>请勿毫无理由地增加空行。为了提高可读性，请增加空行来分隔大型或逻辑代码块。为了提高可读性，请增加两个空格的缩进。请勿使用 TAB。</li>
</ol>
<h1 id="HTML-字符实体"><a href="#HTML-字符实体" class="headerlink" title="HTML 字符实体"></a>HTML 字符实体</h1><p>HTML 中的预留字符必须被替换为字符实体<br>常用：<br>空格 <code>&amp;nbsp;</code>  双引号 <code>&amp;quot;</code>  单引号 <code>&amp;apos;</code><br>乘号 <code>&amp;times;</code> 除号 <code>&amp;divide;</code></p>
<h1 id="HTML-URL"><a href="#HTML-URL" class="headerlink" title="HTML URL"></a>HTML URL</h1><p>统一资源定位器（URL）用于定位万维网上的文档（或其他数据）<br>格式：<code>scheme://host.domain:port/path/filename</code><br>scheme - 定义因特网服务的类型。最常见的类型是 http<br>host - 定义域主机（http 的默认主机是 www）<br>domain - 定义因特网域名，比如 w3school.com.cn<br>:port - 定义主机上的端口号（http 的默认端口号是 80）<br>path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。<br>filename - 定义文档/资源的名称</p>
<h1 id="HTML-框架"><a href="#HTML-框架" class="headerlink" title="HTML 框架"></a>HTML 框架</h1><p>通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。每份HTML文档称为一个框架，并且每个框架都独立于其他的框架。</p>
<p>使用框架的坏处：开发人员必须同时跟踪更多的HTML文档；很难打印整张页面</p>
<p>框架结构标签（frameset）定义如何将窗口分割为框架,每个 frameset 定义了一系列行或列,rows/columns 的值规定了每行或每列占据屏幕的面积</p>
<p>Frame 标签定义了放置在每个框架中的 HTML 文档。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;25%,75%&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_a.htm&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;frame_b.htm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="HTML-背景"><a href="#HTML-背景" class="headerlink" title="HTML 背景"></a>HTML 背景</h1><h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#000000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;rgb(0,0,0)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="图片背景"><a href="#图片背景" class="headerlink" title="图片背景"></a>图片背景</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">&quot;clouds.gif&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">&quot;http://www.w3school.com.cn/clouds.gif&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html 表单</title>
    <url>/2021/04/03/html/html-%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h1 id="html表单"><a href="#html表单" class="headerlink" title="html表单"></a>html表单</h1><p>HTML 表单用于搜集不同类型的用户输入。</p>
<span id="more"></span>
<p><strong>form</strong> 元素定义 HTML 表单<br>HTML 表单包含表单元素。表单元素指的是不同类型的 input 元素、复选框、单选按钮、提交按钮等等。</p>
<h1 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h1><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>accept-charset</td>
<td>规定用于表单提交的字符编码。</td>
</tr>
<tr>
<td>action</td>
<td>规定提交表单时将表单数据发送到何处。</td>
</tr>
<tr>
<td>autocomplete</td>
<td>规定表单是否应打开自动完成（填写）功能。</td>
</tr>
<tr>
<td>enctype</td>
<td>规定将表单数据提交到服务器时应如何编码（仅供 method=”post”）。</td>
</tr>
<tr>
<td>method</td>
<td>规定发送表单数据时要使用的 HTTP 方法。</td>
</tr>
<tr>
<td>name</td>
<td>规定表单名称。</td>
</tr>
<tr>
<td>novalidate</td>
<td>规定提交时不应验证表单。</td>
</tr>
<tr>
<td>rel</td>
<td>规定链接资源和当前文档之间的关系。</td>
</tr>
<tr>
<td>target</td>
<td>规定提交表单后在何处显示接收到的响应。</td>
</tr>
</tbody></table>
<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p><strong>如果省略 action 属性，则将 action 设置为当前页面</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--提交后，将表单数据发送到 &quot;action_page.php&quot;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>First name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bill&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lname&quot;</span>&gt;</span>Last name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Gates&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form action="/action_page.php">
  <label for="fname">First name:</label><br>
  <input type="text" id="fname" name="fname" value="Bill"><br>
  <label for="lname">Last name:</label><br>
  <input type="text" id="lname" name="lname" value="Gates"><br><br>
  <input type="submit" value="Submit">
</form>

<h2 id="target"><a href="#target" class="headerlink" title="target"></a>target</h2><p>默认值为 _self，这意味着响应将在当前窗口中打开。</p>
<p>target的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>_blank</td>
<td>响应显示在新窗口或选项卡中。</td>
</tr>
<tr>
<td>_self</td>
<td>响应显示在当前窗口中。</td>
</tr>
<tr>
<td>_parent</td>
<td>响应显示在父框架中。</td>
</tr>
<tr>
<td>_top</td>
<td>响应显示在窗口的整个 body 中。</td>
</tr>
<tr>
<td>framename</td>
<td>响应显示在命名的 iframe 中。</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--提交的结果将在新的浏览器标签中打开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>method 属性指定提交表单数据时要使用的 HTTP 方法。</p>
<p>表单数据可以作为 URL 变量（使用 method=”get”）或作为 HTTP post 事务（使用 method=”post”）发送。</p>
<p>提交表单数据时，默认的 HTTP 方法是 GET。</p>
<h1 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h1><h2 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h2><h3 id="输入类型：text"><a href="#输入类型：text" class="headerlink" title="输入类型：text"></a>输入类型：text</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"> First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<form>
 First name:<br>
<input type="text" name="firstname">
<br>
 Last name:<br>
<input type="text" name="lastname">
</form> 

<h3 id="输入类型：password"><a href="#输入类型：password" class="headerlink" title="输入类型：password"></a>输入类型：password</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="输入类型：submit"><a href="#输入类型：submit" class="headerlink" title="输入类型：submit"></a>输入类型：submit</h3><p>input type=”submit” 定义提交表单数据至表单处理程序的按钮。</p>
<p><strong>表单处理程序</strong>通常是包含处理输入数据的脚本的服务器页面。</p>
<p>在表单的 action 属性中规定表单处理程序：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;action_page.php&quot;</span>&gt;</span></span><br><span class="line">First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mickey&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Mouse&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h3 id="输入类型：radio"><a href="#输入类型：radio" class="headerlink" title="输入类型：radio"></a>输入类型：radio</h3><p>定义单选按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span>Male</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>Female</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<form>
<input type="radio" name="sex" value="male" checked>Male
<br>
<input type="radio" name="sex" value="female">Female
</form> 

<h3 id="输入类型：checkbox"><a href="#输入类型：checkbox" class="headerlink" title="输入类型：checkbox"></a>输入类型：checkbox</h3><p>定义复选框</p>
<h3 id="输入类型：buttom"><a href="#输入类型：buttom" class="headerlink" title="输入类型：buttom"></a>输入类型：buttom</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello World!&#x27;)&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click Me!&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<input type="button" onclick="alert('Hello World!')" value="Click Me!">

<h3 id="输入类型：number"><a href="#输入类型：number" class="headerlink" title="输入类型：number"></a>输入类型：number</h3><p>用于应该包含数字值的输入字段，能够对数字做出限制。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  Quantity (between 1 and 5):</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;quantity&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">max</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<form>
  Quantity (between 1 and 5):
  <input type="number" name="quantity" min="1" max="5">
</form>

<h2 id="input属性"><a href="#input属性" class="headerlink" title="input属性"></a>input属性</h2><h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><p>value 属性规定输入字段的初始值</p>
<h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><p>属性规定输入字段为只读（不能修改）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John&quot;</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> Last name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<form action="">
 First name:<br>
<input type="text" name="firstname" value="John" readonly>
<br>
 Last name:<br>
<input type="text" name="lastname">
</form> 

<h3 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h3><p>disabled 属性规定输入字段是禁用的。</p>
<p>被禁用的元素是不可用和不可点击的。</p>
<p>被禁用的元素不会被提交。</p>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>size 属性规定输入字段的尺寸（以字符计）</p>
<h3 id="maxlength"><a href="#maxlength" class="headerlink" title="maxlength"></a>maxlength</h3><p>maxlength 属性规定输入字段允许的最大长度</p>
<h3 id="autocomplete"><a href="#autocomplete" class="headerlink" title="autocomplete"></a>autocomplete</h3><p>autocomplete 属性规定表单或输入字段是否应该自动完成。</p>
<p>当自动完成开启，浏览器会基于用户之前的输入值自动填写值。</p>
<h3 id="novalidate"><a href="#novalidate" class="headerlink" title="novalidate"></a>novalidate</h3><p>如果设置，则 novalidate 规定在提交表单时不对表单数据进行验证</p>
<h3 id="form"><a href="#form" class="headerlink" title="form"></a>form</h3><p>form 属性规定 <code>&lt;input&gt;</code> 元素所属的一个或多个表单<br>使得input元素可以在表单外</p>
<h2 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h2><p>定义下拉列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;saab&quot;</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fiat&quot;</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<select name="cars">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="fiat">Fiat</option>
<option value="audi">Audi</option>
</select>

<h2 id="option元素"><a href="#option元素" class="headerlink" title="option元素"></a>option元素</h2><p>定义待选择的选项。</p>
<p>列表通常会把首个选项显示为被选选项</p>
<p>您能够通过添加 selected 属性来定义预定义选项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;fiat&quot;</span> <span class="attr">selected</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure>
<option value="fiat" selected>Fiat</option>

<h2 id="textarea元素"><a href="#textarea元素" class="headerlink" title="textarea元素"></a>textarea元素</h2><p>定义多行输入字段（文本域）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">The cat was playing in the garden.</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<textarea name="message" rows="10" cols="30">
The cat was playing in the garden.
</textarea>

<h2 id="HTML5-datalist元素"><a href="#HTML5-datalist元素" class="headerlink" title="HTML5 datalist元素"></a>HTML5 datalist元素</h2><p>为 input 元素规定预定义选项列表。</p>
<p>用户会在他们输入数据时看到预定义选项的下拉列表。</p>
<p>input 元素的 list 属性必须引用 datalist 元素的 id 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;action_page.php&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form action="action_page.php">
<input list="browsers">
<datalist id="browsers">
   <option value="Internet Explorer">
   <option value="Firefox">
   <option value="Chrome">
   <option value="Opera">
   <option value="Safari">
</datalist> 
</form>]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>html表单</tag>
      </tags>
  </entry>
</search>
